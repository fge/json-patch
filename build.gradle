/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of this file and of both licenses is available at the root of this
 * project or, if you have the jar distribution, in directory META-INF/, under
 * the names LGPL-3.0.txt and ASL-2.0.txt respectively.
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */

buildscript {
    dependencies {
        classpath 'com.cvent.gradle:cvent-publish-plugin:0.9'
        classpath(group: "org.springframework.build.gradle",
            name: "propdeps-plugin", version: "0.0.7");
    }
};

configure(allprojects) {
    apply(plugin: "propdeps");
    apply(plugin: "propdeps-maven");
    apply(plugin: "propdeps-idea");
    apply(plugin: "propdeps-eclipse");
}

apply plugin: 'com.cvent.publish'
apply(plugin: "java");
apply(plugin: "maven");
apply(plugin: "signing");
apply(plugin: "osgi");
apply(plugin: "idea");
apply(plugin: "eclipse");

group = "com.cvent";
version = "2.1-SNAPSHOT";
description = "JSON Patch (RFC 6902) and JSON Merge Patch (RFC 7386) implementation in Java";

/*
 * List of dependencies
 */
dependencies {
    provided(group: "com.google.code.findbugs", name: "jsr305",
        version: "2.0.3");
    compile(group: "com.github.fge", name: "jackson-coreutils",
        version: "1.8");
    testCompile(group: "org.testng", name: "testng", version: "6.8.7") {
        exclude(group: "junit", module: "junit");
        exclude(group: "org.beanshell", module: "bsh");
        exclude(group: "org.yaml", module: "snakeyaml");
    };
    testCompile(group: "org.mockito", name: "mockito-core", version: "1.9.5");
    testCompile(group: "org.assertj", name: "assertj-core", version: "1.7.0");
}

javadoc.options.links("http://docs.oracle.com/javase/6/docs/api/");
javadoc.options.links("http://jsr-305.googlecode.com/svn/trunk/javadoc/");
javadoc.options.links("http://fasterxml.github.com/jackson-databind/javadoc/2.2.0/");
javadoc.options.links("http://fasterxml.github.com/jackson-core/javadoc/2.2.0/");
javadoc.options.links("http://fasterxml.github.com/jackson-annotations/javadoc/2.2.0/");
javadoc.options.links("http://docs.guava-libraries.googlecode.com/git-history/v16.0.1/javadoc/");
javadoc.options.links("http://fge.github.io/msg-simple/");
javadoc.options.links("http://fge.github.io/jackson-coreutils/");

/*
 * Necessary! Otherwise TestNG will not be used...
 *
 */
test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

//javadoc {
//    options.overview = "src/main/java/overview.html";
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
}

task wrapper(type: Wrapper) {
    gradleVersion = "1.11";
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}

task pom << {
    pom {}.writeTo("${projectDir}/pom.xml");
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

